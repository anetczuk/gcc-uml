@startuml

card "::funcA() -> int" {
    start
    :int retX = 0;
    :::item::ExampleC objC = {[::item::ExampleB] = {[::item::ExampleB::_vptr.ExampleB] = (&_ZTVN4item8ExampleCE) + 16}};
    :::item::ExampleB * ptrB = (&objC);
    :retX = None + retX;
    #lightgreen:return retX;
    stop
}

card "::item::ExampleC::ExampleC() -> void" {
    start
    :(&(*this))->__ct_base();
    :_vptr.ExampleB = (&_ZTVN4item8ExampleCE) + 16;
    stop
}

card "::item::ExampleC::methodB1() -> int" {
    start
    #lightgreen:return 16;
    stop
}

card "::item::ExampleC::methodB2() -> int" {
    start
    #lightgreen:return 17;
    stop
}

card "::item::ExampleB::ExampleB() -> void" {
    start
    :_vptr.ExampleB = (&_ZTVN4item8ExampleBE) + 16;
    stop
}

card "::item::ExampleB::methodB1() -> int" {
    start
    #lightgreen:return 6;
    stop
}

card "::item::ExampleB::methodB2() -> int" {
    start
    #lightgreen:return 7;
    stop
}

card "::item::ExampleA::methodA1() -> int" {
    start
    #lightgreen:return 5;
    stop
}


@enduml
