@startuml

card "::main() -> int" {
    :int const aaa;
    :aaa = ::calc_valA(4);
    :int bbb;
    :bbb = ::calc_valB(aaa);
    #lightgreen:return ::calc_valC(bbb);
    stop
    -[hidden]->
}

card "::calc_valA(int const valueA) -> int" {
    :int xxxA = (valueA * 2.100000000000000088817842e+0) + 3.0e+0;
    :int const xxxB = xxxA * 3;
    #lightgreen:return xxxB;
    stop
    -[hidden]->
}

card "::calc_valB(int const valueB) -> long int const" {
    :int timestamp;
    :timestamp = ::time(0);
    :timestamp = timestamp + 1;
    :timestamp = (timestamp + 2) + timestamp;
    :int const bbb = timestamp + 11;
    if (bbb & 1 == 0 ?) then (true)
        :int const ccc = 0;
        #lightgreen:return 0;
        stop
    else (false)
        :int const ddd = valueB * 4;
        #lightgreen:return ddd;
        stop
    endif
    -[hidden]->
}

card "::calc_valC(int const valueC) -> int" {
    :int[] arrY;
    :int[] arrX = {[0] = 10, [1] = 20};
    :arrX[0] = arrX[0] + valueC;
    :arrX[1] = valueC / 2.100000000000000088817842e+0;
    :int const xxxB = (arrX[1] * 3) + arrX[0];
    #lightgreen:return xxxB;
    stop
    -[hidden]->
}


@enduml
